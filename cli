#!/bin/bash

BASHKIT_INSTALL="$DIRNAME"
BASHKIT_BIN="$BASHKIT_INSTALL/bin"
BASHKIT_APPS="$BASHKIT_INSTALL/apps"

opt --bin,-b --force,-f
opt --colors && BASHKIT_COLORS=true

not-root () {
	[ ! -O $BASHKIT_BIN ] && [ $EUID = 0 ] && not opt --force && error "you are root and do not own bin\nuse --force to continue"
}

app-init () {
	[ $# = 0 ] && error app is required
	app_filename=$(basename $1)
	local tmp=${app_filename%.*}
	app_bin=${opt_bin-$tmp}
}

app-not-exists () {
	[ -e $BASHKIT_BIN/$app_bin ] && not opt --force && error app already installed
}

cmd-link () { # Link a script for development
	not-root
	app-init $1
	app-not-exists
	local link=$BASHKIT_BIN/$app_bin
	touch $BASHKIT_APPS/$app_bin
	cd $(dirname $1)
	rm -f $link
	ln -s $PWD/$app_filename $link
	chmod +x $PWD/$app_filename
}

cmd-list () { # List all installed apps
	ls $BASHKIT_APPS | cat -
}

tab-has-1 () {
	cmd-list
}

cmd-has () { # Test whether an app was installed with bashkit
	app-init $1
	[ -e $BASHKIT_BIN/$1 ] && return 0
	return 1
}

cmd-selfdestruct () { # Remove bashkit from this machine
	for app in $(ls $BASHKIT_APPS); do
		rm -f $BASHKIT_BIN/$app
	done
	rm -f $BASHKIT_BIN/bashkit
	rm -rf $BASHKIT_INSTALL
}

tab-uninstall-1 () {
	cmd-list
}

cmd-uninstall () { # Remove a previously installed or linked app
	[ "$1" = "" ] && error app is required
	local link=$BASHKIT_BIN/$1
	[ ! -e $link ] && not opt --force && error app not found
	rm -f $link
	rm -rf $BASHKIT_APPS/$1
}

cmd-install () { # Installs an app from a git repository
	not-root
	app-init $1
	app-not-exists
	local repo=${1/https:\/\/github.com\//}
	local app_dir=$BASHKIT_APPS/$app_bin
	[ "${repo/:/}" = "$repo" ] && [ "${repo/@/}" = "$repo" ] && [ ! -e $repo ] && repo="git://github.com/$repo.git"
	git clone $repo $app_dir || return $?
	for file in {main,$app_bin}{.sh,}; do
		if [ -e $app_dir/$file ]; then
			$FILENAME link $app_dir/$file --bin $app_bin --force
			return $?
		fi
	done
	$FILENAME uninstall $app_bin --force
	error no install target found
}

tab-update-1 () {
	cmd-list
}

cmd-update () { # Update and previously installed app
	[ ! -e $BASHKIT_APPS/$1/.git ] && error app cannot be updated
	cd $BASHKIT_APPS/$1
	git pull
}

cmd-standalone () { # Generate installer that can be used without bashkit
	app-init $1
	cat $DIRNAME/standalone | sed "s|__NAME__|$app_bin|g" | sed "s|__REPO__|$1|g"
}

cmd-selfupdate () { # Upgrade bashkit to the newest available version
	cd $BASHKIT_INSTALL
	git pull
}

cmd-rc () { # Print the path to the bashkit rc file
	echo $DIRNAME/bashrc
}

cmd-dirname () { # Print the install dir of bashkit
	echo $DIRNAME
}

cmd () {
	local FILENAME=$DIRNAME/cli
	print-help
	exit 1
}

opt --help && cmd && exit 0
run